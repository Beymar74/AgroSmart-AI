// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An intelligent alerting AI agent that analyzes sensor data and historical trends to proactively trigger alerts.
 *
 * - analyzeAndAlert - A function that handles the analysis and alerting process.
 * - AnalyzeAndAlertInput - The input type for the analyzeAndAlert function.
 * - AnalyzeAndAlertOutput - The return type for the analyzeAndAlert function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';
import {EnvironmentData, getEnvironmentData} from '@/services/environment';
import {AnimalData, getLatestAnimalData} from '@/services/animal';

const AnalyzeAndAlertInputSchema = z.object({
  environmentData: z.optional(z.any()).describe('Current environment data including temperature, humidity, sunlight, and water level. If not provided, the flow will fetch it.'),
  animalData: z.optional(z.any()).describe('Latest animal data including code, temperature, health status, and last feeding time. If not provided, the flow will fetch it.'),
  historicalAlerts: z.string().describe('Historical alert data to identify trends.'),
});
export type AnalyzeAndAlertInput = z.infer<typeof AnalyzeAndAlertInputSchema>;

const AnalyzeAndAlertOutputSchema = z.object({
  alerts: z.array(z.string()).describe('A list of alerts triggered based on the analysis.'),
});
export type AnalyzeAndAlertOutput = z.infer<typeof AnalyzeAndAlertOutputSchema>;

export async function analyzeAndAlert(input: AnalyzeAndAlertInput): Promise<AnalyzeAndAlertOutput> {
  return analyzeAndAlertFlow(input);
}

const analyzeAndAlertPrompt = ai.definePrompt({
  name: 'analyzeAndAlertPrompt',
  input: {
    schema: z.object({
      environmentData: z.string().describe('Current environment data including temperature, humidity, sunlight, and water level.'),
      animalData: z.string().describe('Latest animal data including code, temperature, health status, and last feeding time.'),
      historicalAlerts: z.string().describe('Historical alert data to identify trends.'),
    }),
  },
  output: {
    schema: z.object({
      alerts: z.array(z.string()).describe('A list of alerts triggered based on the analysis.'),
    }),
  },
  prompt: `You are an AI assistant specialized in agricultural monitoring and alerting.

You will analyze the provided sensor data, animal data, and historical alert trends to identify potential issues and trigger alerts.

Consider the following factors when generating alerts:
- Environmental anomalies (e.g., sudden temperature drops, high humidity levels).
- Animal health concerns (e.g., fever, abnormal feeding patterns).
- Historical trends that may indicate potential outbreaks or issues.

Based on the analysis, generate a list of alerts that require attention from the farm manager.

Environment Data: {{{environmentData}}}
Animal Data: {{{animalData}}}
Historical Alerts: {{{historicalAlerts}}}

Output the alerts in a JSON array.
`,
});

const analyzeAndAlertFlow = ai.defineFlow<
  typeof AnalyzeAndAlertInputSchema,
  typeof AnalyzeAndAlertOutputSchema
>(
  {
    name: 'analyzeAndAlertFlow',
    inputSchema: AnalyzeAndAlertInputSchema,
    outputSchema: AnalyzeAndAlertOutputSchema,
  },
  async input => {
    let environmentData = input.environmentData;
    if (!environmentData) {
      environmentData = await getEnvironmentData();
    }

    let animalData = input.animalData;
    if (!animalData) {
      animalData = await getLatestAnimalData();
    }

    const {output} = await analyzeAndAlertPrompt({
      environmentData: JSON.stringify(environmentData),
      animalData: JSON.stringify(animalData),
      historicalAlerts: input.historicalAlerts,
    });

    return output!;
  }
);
